#!/bin/bash
# The script clones all repositories of an GitHub organization.
 
# the github organization to fetch all repositories for
GITHUB_ORGANIZATION=${GITHUB_ORGANIZATION:=""}
GITHUB_USER=${GITHUB_USER:=""}
GITHUB_CHECKOUT_DIR=${GITHUB_CHECKOUT_DIR:=""}

if [ "$GITHUB_ORGANIZATION" == "" ]; then
    echo "Please configure your GITHUB_ORGANIZATION, GITHUB_USER and GITHUB_CHECKOUT_DIR env variables"
    exit 1;
fi
if [ "$GITHUB_USER" == "" ]; then
    echo "Please configure your GITHUB_ORGANIZATION, GITHUB_USER and GITHUB_CHECKOUT_DIR env variables"
    exit 2;
fi
echo "using GITHUB_ORGANIZATION=$GITHUB_ORGANIZATION GITHUB_USER=$GITHUB_USER GITHUB_CHECKOUT_DIR=$GITHUB_CHECKOUT_DIR"

DEBUGGING="0"
if [ "$1" == "--debug" ]; then
    DEBUGGING="1"
elif [ "$2" == "--debug" ]; then
    DEBUGGING="1"
fi

# the git clone cmd used for cloning each repository
# the parameter recursive is used to clone submodules, too.
GIT_CLONE_CMD="git clone"
GIT_PULL_CMD="git pull"
GIT_CONFIG_REBASE_CMD="git config branch.autosetuprebase always"
GIT_CONFIG_REBASE_MASTER_CMD="git config branch.master.rebase true"

stty -echo
read -p "github password: " GITHUB_PASS; echo
stty echo

if [ ! -d ${GITHUB_CHECKOUT_DIR} ]; then
    echo "${GITHUB_CHECKOUT_DIR} does not exist"
    exit 1;
else
    cd ${GITHUB_CHECKOUT_DIR}
    if [ "$?" != "0" ]; then echo "Failed to change directory to ${GITHUB_CHECKOUT_DIR}"; exit 1; fi 
     
    # fetch repository list via github api
    # grep fetches the json object key ssh_url, which contains the ssh url for the repository
    PAGE=1;
    TMPFILE=`mktemp -t fetch-github-repos`
    if [ "$DEBUGGING" == "1" ]; then
        echo "using tmp file=$TMPFILE"
    fi
    curl -o "${TMPFILE}" -u "${GITHUB_USER}:${GITHUB_PASS}" --silent --show-error "https://api.github.com/orgs/${GITHUB_ORGANIZATION}/repos?type=all&page=${PAGE}&per_page=100" -q
    if [ "$DEBUGGING" == "1" ]; then
        cat $TMPFILE;
    fi
    REPOLIST=`cat ${TMPFILE} | grep "\"ssh_url\"" | awk -F': "' '{print $2}' | sed -e 's/",//g'`
    rm -f $TMPFILE

    while [ "$REPOLIST" != "" ]; do
        # loop over all repository urls and execute clone
        for REPO in $REPOLIST; do
            # git@github.com:organization/reponame.git
            REPONAME=`echo $REPO | awk '{split($0, a, "/"); split(a[2], b, "."); print b[1];}'`;
    
            if [ "$1" == "--list" ]; then
                echo $REPO
                continue;
            fi
    
    
            if [ -d $REPONAME ]; then
                echo "updating ${REPONAME}"
                GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${REPONAME}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${REPONAME}/.git" ${GIT_PULL_CMD}
            else
                echo "cloning ${REPONAME}"
                ${GIT_CLONE_CMD} ${REPO} ${REPONAME}
            fi
    
            # run git commands after checkout/update
            GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${REPONAME}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${REPONAME}/.git" ${GIT_CONFIG_REBASE_CMD}
            GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${REPONAME}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${REPONAME}/.git" ${GIT_CONFIG_REBASE_MASTER_CMD}
        done

        let PAGE=PAGE+1
        REPOLIST=`curl -u "${GITHUB_USER}:${GITHUB_PASS}" --silent "https://api.github.com/orgs/${GITHUB_ORGANIZATION}/repos?type=all&page=$PAGE&per_page=100" -q | grep "\"ssh_url\"" | awk -F': "' '{print $2}' | sed -e 's/",//g'`
    done
fi
